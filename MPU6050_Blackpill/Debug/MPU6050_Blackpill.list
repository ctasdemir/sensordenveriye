
MPU6050_Blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002500  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002694  08002694  00012694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026ac  080026ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026b4  080026b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026b4  080026b4  000126b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026b8  080026b8  000126b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080026c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080026c8  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000703d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001264  00000000  00000000  00027079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  000282e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  00028998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014739  00000000  00000000  00028fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008501  00000000  00000000  0003d719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080c69  00000000  00000000  00045c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c6883  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b18  00000000  00000000  000c68d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800267c 	.word	0x0800267c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800267c 	.word	0x0800267c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fa24 	bl	800091c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f84c 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8e4 	bl	80006a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f8b4 	bl	8000648 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

 MPU6050_TestSensor();
 80004e0:	f000 f80e 	bl	8000500 <MPU6050_TestSensor>
 MPU6050_ReadID();
 80004e4:	f000 f824 	bl	8000530 <MPU6050_ReadID>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin( GPIOC, GPIO_PIN_13 );
 80004e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <main+0x30>)
 80004ee:	f000 fd2e 	bl	8000f4e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80004f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f6:	f000 fa83 	bl	8000a00 <HAL_Delay>
	  HAL_GPIO_TogglePin( GPIOC, GPIO_PIN_13 );
 80004fa:	e7f5      	b.n	80004e8 <main+0x1c>
 80004fc:	40020800 	.word	0x40020800

08000500 <MPU6050_TestSensor>:
  }
  /* USER CODE END 3 */
}

int16_t MPU6050_TestSensor()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	status = HAL_I2C_IsDeviceReady(&hi2c1, (0x69<<1), 4, 100);
 8000506:	2364      	movs	r3, #100	; 0x64
 8000508:	2204      	movs	r2, #4
 800050a:	21d2      	movs	r1, #210	; 0xd2
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <MPU6050_TestSensor+0x2c>)
 800050e:	f001 f8a3 	bl	8001658 <HAL_I2C_IsDeviceReady>
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]

	if ( HAL_OK == status ) {
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d101      	bne.n	8000520 <MPU6050_TestSensor+0x20>
		return 1;
 800051c:	2301      	movs	r3, #1
 800051e:	e000      	b.n	8000522 <MPU6050_TestSensor+0x22>
	}
	else {
		return 0;
 8000520:	2300      	movs	r3, #0
	}
}
 8000522:	4618      	mov	r0, r3
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000028 	.word	0x20000028

08000530 <MPU6050_ReadID>:


int32_t MPU6050_ReadID(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af04      	add	r7, sp, #16
	int32_t idVal = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
	int8_t buffer[1];
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(&hi2c1, (0x69<<1), 0x75, 1, buffer, 1, 100);
 800053a:	2364      	movs	r3, #100	; 0x64
 800053c:	9302      	str	r3, [sp, #8]
 800053e:	2301      	movs	r3, #1
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	463b      	mov	r3, r7
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2301      	movs	r3, #1
 8000548:	2275      	movs	r2, #117	; 0x75
 800054a:	21d2      	movs	r1, #210	; 0xd2
 800054c:	4807      	ldr	r0, [pc, #28]	; (800056c <MPU6050_ReadID+0x3c>)
 800054e:	f000 fe5d 	bl	800120c <HAL_I2C_Mem_Read>
 8000552:	4603      	mov	r3, r0
 8000554:	70fb      	strb	r3, [r7, #3]
	if(  HAL_OK != status  )
	{
		//todo
	}

	if ( 0x68 == buffer[0] ) {
 8000556:	f997 3000 	ldrsb.w	r3, [r7]
 800055a:	2b68      	cmp	r3, #104	; 0x68
 800055c:	d101      	bne.n	8000562 <MPU6050_ReadID+0x32>
		return 1;
 800055e:	2301      	movs	r3, #1
 8000560:	e000      	b.n	8000564 <MPU6050_ReadID+0x34>
	}
	else {
		return 0;
 8000562:	2300      	movs	r3, #0
	}

}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000028 	.word	0x20000028

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f002 f874 	bl	800266c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b29      	ldr	r3, [pc, #164]	; (8000640 <SystemClock_Config+0xd0>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a28      	ldr	r2, [pc, #160]	; (8000640 <SystemClock_Config+0xd0>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <SystemClock_Config+0xd0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <SystemClock_Config+0xd4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <SystemClock_Config+0xd4>)
 80005be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <SystemClock_Config+0xd4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005e4:	2319      	movs	r3, #25
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ee:	2304      	movs	r3, #4
 80005f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f2:	2307      	movs	r3, #7
 80005f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fbde 	bl	8001dbc <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000606:	f000 f8ad 	bl	8000764 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2302      	movs	r3, #2
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2102      	movs	r1, #2
 8000626:	4618      	mov	r0, r3
 8000628:	f001 fe40 	bl	80022ac <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000632:	f000 f897 	bl	8000764 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	; 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_I2C1_Init+0x50>)
 800064e:	4a13      	ldr	r2, [pc, #76]	; (800069c <MX_I2C1_Init+0x54>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_I2C1_Init+0x50>)
 8000654:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MX_I2C1_Init+0x58>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_I2C1_Init+0x50>)
 8000666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800066a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_I2C1_Init+0x50>)
 8000686:	f000 fc7d 	bl	8000f84 <HAL_I2C_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000690:	f000 f868 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000028 	.word	0x20000028
 800069c:	40005400 	.word	0x40005400
 80006a0:	000186a0 	.word	0x000186a0

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b27      	ldr	r3, [pc, #156]	; (800075c <MX_GPIO_Init+0xb8>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a26      	ldr	r2, [pc, #152]	; (800075c <MX_GPIO_Init+0xb8>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b24      	ldr	r3, [pc, #144]	; (800075c <MX_GPIO_Init+0xb8>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <MX_GPIO_Init+0xb8>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a1f      	ldr	r2, [pc, #124]	; (800075c <MX_GPIO_Init+0xb8>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_GPIO_Init+0xb8>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_GPIO_Init+0xb8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a18      	ldr	r2, [pc, #96]	; (800075c <MX_GPIO_Init+0xb8>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_GPIO_Init+0xb8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_GPIO_Init+0xb8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a11      	ldr	r2, [pc, #68]	; (800075c <MX_GPIO_Init+0xb8>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_GPIO_Init+0xb8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000730:	480b      	ldr	r0, [pc, #44]	; (8000760 <MX_GPIO_Init+0xbc>)
 8000732:	f000 fbf3 	bl	8000f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_GPIO_Init+0xbc>)
 8000750:	f000 fa60 	bl	8000c14 <HAL_GPIO_Init>

}
 8000754:	bf00      	nop
 8000756:	3728      	adds	r7, #40	; 0x28
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40020800 	.word	0x40020800

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>
	...

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <HAL_MspInit+0x4c>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000784:	6453      	str	r3, [r2, #68]	; 0x44
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_MspInit+0x4c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <HAL_MspInit+0x4c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	6413      	str	r3, [r2, #64]	; 0x40
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a19      	ldr	r2, [pc, #100]	; (8000844 <HAL_I2C_MspInit+0x84>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d12b      	bne.n	800083a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_I2C_MspInit+0x88>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <HAL_I2C_MspInit+0x88>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <HAL_I2C_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007fe:	23c0      	movs	r3, #192	; 0xc0
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000802:	2312      	movs	r3, #18
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800080e:	2304      	movs	r3, #4
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <HAL_I2C_MspInit+0x8c>)
 800081a:	f000 f9fb 	bl	8000c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <HAL_I2C_MspInit+0x88>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a08      	ldr	r2, [pc, #32]	; (8000848 <HAL_I2C_MspInit+0x88>)
 8000828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_I2C_MspInit+0x88>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40005400 	.word	0x40005400
 8000848:	40023800 	.word	0x40023800
 800084c:	40020400 	.word	0x40020400

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f890 	bl	80009c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <SystemInit+0x20>)
 80008aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ae:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <SystemInit+0x20>)
 80008b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <Reset_Handler>:
 80008c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000900 <LoopFillZerobss+0x12>
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <LoopFillZerobss+0x16>)
 80008ce:	490e      	ldr	r1, [pc, #56]	; (8000908 <LoopFillZerobss+0x1a>)
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <LoopFillZerobss+0x1e>)
 80008d2:	2300      	movs	r3, #0
 80008d4:	e002      	b.n	80008dc <LoopCopyDataInit>

080008d6 <CopyDataInit>:
 80008d6:	58d4      	ldr	r4, [r2, r3]
 80008d8:	50c4      	str	r4, [r0, r3]
 80008da:	3304      	adds	r3, #4

080008dc <LoopCopyDataInit>:
 80008dc:	18c4      	adds	r4, r0, r3
 80008de:	428c      	cmp	r4, r1
 80008e0:	d3f9      	bcc.n	80008d6 <CopyDataInit>
 80008e2:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <LoopFillZerobss+0x22>)
 80008e4:	4c0b      	ldr	r4, [pc, #44]	; (8000914 <LoopFillZerobss+0x26>)
 80008e6:	2300      	movs	r3, #0
 80008e8:	e001      	b.n	80008ee <LoopFillZerobss>

080008ea <FillZerobss>:
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	3204      	adds	r2, #4

080008ee <LoopFillZerobss>:
 80008ee:	42a2      	cmp	r2, r4
 80008f0:	d3fb      	bcc.n	80008ea <FillZerobss>
 80008f2:	f7ff ffd7 	bl	80008a4 <SystemInit>
 80008f6:	f001 fe95 	bl	8002624 <__libc_init_array>
 80008fa:	f7ff fde7 	bl	80004cc <main>
 80008fe:	4770      	bx	lr
 8000900:	20010000 	.word	0x20010000
 8000904:	20000000 	.word	0x20000000
 8000908:	2000000c 	.word	0x2000000c
 800090c:	080026bc 	.word	0x080026bc
 8000910:	2000000c 	.word	0x2000000c
 8000914:	20000080 	.word	0x20000080

08000918 <ADC_IRQHandler>:
 8000918:	e7fe      	b.n	8000918 <ADC_IRQHandler>
	...

0800091c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_Init+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0d      	ldr	r2, [pc, #52]	; (800095c <HAL_Init+0x40>)
 8000926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_Init+0x40>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_Init+0x40>)
 8000932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000936:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_Init+0x40>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_Init+0x40>)
 800093e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f931 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094a:	200f      	movs	r0, #15
 800094c:	f000 f808 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000950:	f7ff ff0e 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023c00 	.word	0x40023c00

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x54>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x58>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000976:	fbb3 f3f1 	udiv	r3, r3, r1
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f93b 	bl	8000bfa <HAL_SYSTICK_Config>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e00e      	b.n	80009ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d80a      	bhi.n	80009aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f000 f911 	bl	8000bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <HAL_InitTick+0x5c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e000      	b.n	80009ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000004 	.word	0x20000004

080009c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_IncTick+0x20>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x24>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_IncTick+0x24>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000008 	.word	0x20000008
 80009e4:	2000007c 	.word	0x2000007c

080009e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return uwTick;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_GetTick+0x14>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	2000007c 	.word	0x2000007c

08000a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a08:	f7ff ffee 	bl	80009e8 <HAL_GetTick>
 8000a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a18:	d005      	beq.n	8000a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_Delay+0x44>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a26:	bf00      	nop
 8000a28:	f7ff ffde 	bl	80009e8 <HAL_GetTick>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d8f7      	bhi.n	8000a28 <HAL_Delay+0x28>
  {
  }
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008

08000a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	60d3      	str	r3, [r2, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	f003 0307 	and.w	r3, r3, #7
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
         );
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	; 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f7ff ff8e 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff47 	bl	8000a48 <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd4:	f7ff ff5c 	bl	8000a90 <__NVIC_GetPriorityGrouping>
 8000bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f7ff ff8e 	bl	8000b00 <NVIC_EncodePriority>
 8000be4:	4602      	mov	r2, r0
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff5d 	bl	8000aac <__NVIC_SetPriority>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffb0 	bl	8000b68 <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e159      	b.n	8000ee4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c30:	2201      	movs	r2, #1
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f040 8148 	bne.w	8000ede <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d005      	beq.n	8000c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d130      	bne.n	8000cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	f003 0201 	and.w	r2, r3, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d017      	beq.n	8000d04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d123      	bne.n	8000d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	08da      	lsrs	r2, r3, #3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3208      	adds	r2, #8
 8000d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	220f      	movs	r2, #15
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	691a      	ldr	r2, [r3, #16]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	08da      	lsrs	r2, r3, #3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3208      	adds	r2, #8
 8000d52:	69b9      	ldr	r1, [r7, #24]
 8000d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0203 	and.w	r2, r3, #3
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 80a2 	beq.w	8000ede <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b57      	ldr	r3, [pc, #348]	; (8000efc <HAL_GPIO_Init+0x2e8>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a56      	ldr	r2, [pc, #344]	; (8000efc <HAL_GPIO_Init+0x2e8>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b54      	ldr	r3, [pc, #336]	; (8000efc <HAL_GPIO_Init+0x2e8>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000db6:	4a52      	ldr	r2, [pc, #328]	; (8000f00 <HAL_GPIO_Init+0x2ec>)
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	220f      	movs	r2, #15
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a49      	ldr	r2, [pc, #292]	; (8000f04 <HAL_GPIO_Init+0x2f0>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d019      	beq.n	8000e16 <HAL_GPIO_Init+0x202>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a48      	ldr	r2, [pc, #288]	; (8000f08 <HAL_GPIO_Init+0x2f4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d013      	beq.n	8000e12 <HAL_GPIO_Init+0x1fe>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a47      	ldr	r2, [pc, #284]	; (8000f0c <HAL_GPIO_Init+0x2f8>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d00d      	beq.n	8000e0e <HAL_GPIO_Init+0x1fa>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a46      	ldr	r2, [pc, #280]	; (8000f10 <HAL_GPIO_Init+0x2fc>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d007      	beq.n	8000e0a <HAL_GPIO_Init+0x1f6>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a45      	ldr	r2, [pc, #276]	; (8000f14 <HAL_GPIO_Init+0x300>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d101      	bne.n	8000e06 <HAL_GPIO_Init+0x1f2>
 8000e02:	2304      	movs	r3, #4
 8000e04:	e008      	b.n	8000e18 <HAL_GPIO_Init+0x204>
 8000e06:	2307      	movs	r3, #7
 8000e08:	e006      	b.n	8000e18 <HAL_GPIO_Init+0x204>
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e004      	b.n	8000e18 <HAL_GPIO_Init+0x204>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	e002      	b.n	8000e18 <HAL_GPIO_Init+0x204>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <HAL_GPIO_Init+0x204>
 8000e16:	2300      	movs	r3, #0
 8000e18:	69fa      	ldr	r2, [r7, #28]
 8000e1a:	f002 0203 	and.w	r2, r2, #3
 8000e1e:	0092      	lsls	r2, r2, #2
 8000e20:	4093      	lsls	r3, r2
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e28:	4935      	ldr	r1, [pc, #212]	; (8000f00 <HAL_GPIO_Init+0x2ec>)
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3302      	adds	r3, #2
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e36:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <HAL_GPIO_Init+0x304>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e5a:	4a2f      	ldr	r2, [pc, #188]	; (8000f18 <HAL_GPIO_Init+0x304>)
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <HAL_GPIO_Init+0x304>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e84:	4a24      	ldr	r2, [pc, #144]	; (8000f18 <HAL_GPIO_Init+0x304>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8a:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <HAL_GPIO_Init+0x304>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eae:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <HAL_GPIO_Init+0x304>)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <HAL_GPIO_Init+0x304>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed8:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <HAL_GPIO_Init+0x304>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	61fb      	str	r3, [r7, #28]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	2b0f      	cmp	r3, #15
 8000ee8:	f67f aea2 	bls.w	8000c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40013800 	.word	0x40013800
 8000f04:	40020000 	.word	0x40020000
 8000f08:	40020400 	.word	0x40020400
 8000f0c:	40020800 	.word	0x40020800
 8000f10:	40020c00 	.word	0x40020c00
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40013c00 	.word	0x40013c00

08000f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f2c:	787b      	ldrb	r3, [r7, #1]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f38:	e003      	b.n	8000f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f3a:	887b      	ldrh	r3, [r7, #2]
 8000f3c:	041a      	lsls	r2, r3, #16
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	619a      	str	r2, [r3, #24]
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b085      	sub	sp, #20
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	460b      	mov	r3, r1
 8000f58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f60:	887a      	ldrh	r2, [r7, #2]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4013      	ands	r3, r2
 8000f66:	041a      	lsls	r2, r3, #16
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	400b      	ands	r3, r1
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
}
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e12b      	b.n	80011ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d106      	bne.n	8000fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fc08 	bl	80007c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2224      	movs	r2, #36	; 0x24
 8000fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0201 	bic.w	r2, r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fe6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fe8:	f001 fb08 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 8000fec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4a81      	ldr	r2, [pc, #516]	; (80011f8 <HAL_I2C_Init+0x274>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d807      	bhi.n	8001008 <HAL_I2C_Init+0x84>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4a80      	ldr	r2, [pc, #512]	; (80011fc <HAL_I2C_Init+0x278>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	bf94      	ite	ls
 8001000:	2301      	movls	r3, #1
 8001002:	2300      	movhi	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	e006      	b.n	8001016 <HAL_I2C_Init+0x92>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4a7d      	ldr	r2, [pc, #500]	; (8001200 <HAL_I2C_Init+0x27c>)
 800100c:	4293      	cmp	r3, r2
 800100e:	bf94      	ite	ls
 8001010:	2301      	movls	r3, #1
 8001012:	2300      	movhi	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e0e7      	b.n	80011ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4a78      	ldr	r2, [pc, #480]	; (8001204 <HAL_I2C_Init+0x280>)
 8001022:	fba2 2303 	umull	r2, r3, r2, r3
 8001026:	0c9b      	lsrs	r3, r3, #18
 8001028:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	430a      	orrs	r2, r1
 800103c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a6a      	ldr	r2, [pc, #424]	; (80011f8 <HAL_I2C_Init+0x274>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d802      	bhi.n	8001058 <HAL_I2C_Init+0xd4>
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	3301      	adds	r3, #1
 8001056:	e009      	b.n	800106c <HAL_I2C_Init+0xe8>
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800105e:	fb02 f303 	mul.w	r3, r2, r3
 8001062:	4a69      	ldr	r2, [pc, #420]	; (8001208 <HAL_I2C_Init+0x284>)
 8001064:	fba2 2303 	umull	r2, r3, r2, r3
 8001068:	099b      	lsrs	r3, r3, #6
 800106a:	3301      	adds	r3, #1
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	6812      	ldr	r2, [r2, #0]
 8001070:	430b      	orrs	r3, r1
 8001072:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800107e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	495c      	ldr	r1, [pc, #368]	; (80011f8 <HAL_I2C_Init+0x274>)
 8001088:	428b      	cmp	r3, r1
 800108a:	d819      	bhi.n	80010c0 <HAL_I2C_Init+0x13c>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	1e59      	subs	r1, r3, #1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fbb1 f3f3 	udiv	r3, r1, r3
 800109a:	1c59      	adds	r1, r3, #1
 800109c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80010a0:	400b      	ands	r3, r1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00a      	beq.n	80010bc <HAL_I2C_Init+0x138>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1e59      	subs	r1, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80010b4:	3301      	adds	r3, #1
 80010b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ba:	e051      	b.n	8001160 <HAL_I2C_Init+0x1dc>
 80010bc:	2304      	movs	r3, #4
 80010be:	e04f      	b.n	8001160 <HAL_I2C_Init+0x1dc>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d111      	bne.n	80010ec <HAL_I2C_Init+0x168>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	1e58      	subs	r0, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6859      	ldr	r1, [r3, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	440b      	add	r3, r1
 80010d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	e012      	b.n	8001112 <HAL_I2C_Init+0x18e>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	1e58      	subs	r0, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6859      	ldr	r1, [r3, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	0099      	lsls	r1, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001102:	3301      	adds	r3, #1
 8001104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf0c      	ite	eq
 800110c:	2301      	moveq	r3, #1
 800110e:	2300      	movne	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_I2C_Init+0x196>
 8001116:	2301      	movs	r3, #1
 8001118:	e022      	b.n	8001160 <HAL_I2C_Init+0x1dc>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10e      	bne.n	8001140 <HAL_I2C_Init+0x1bc>
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	1e58      	subs	r0, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6859      	ldr	r1, [r3, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	440b      	add	r3, r1
 8001130:	fbb0 f3f3 	udiv	r3, r0, r3
 8001134:	3301      	adds	r3, #1
 8001136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800113a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113e:	e00f      	b.n	8001160 <HAL_I2C_Init+0x1dc>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	1e58      	subs	r0, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6859      	ldr	r1, [r3, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	0099      	lsls	r1, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	fbb0 f3f3 	udiv	r3, r0, r3
 8001156:	3301      	adds	r3, #1
 8001158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800115c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	6809      	ldr	r1, [r1, #0]
 8001164:	4313      	orrs	r3, r2
 8001166:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69da      	ldr	r2, [r3, #28]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800118e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	6911      	ldr	r1, [r2, #16]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68d2      	ldr	r2, [r2, #12]
 800119a:	4311      	orrs	r1, r2
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	430b      	orrs	r3, r1
 80011a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0201 	orr.w	r2, r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2220      	movs	r2, #32
 80011da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	000186a0 	.word	0x000186a0
 80011fc:	001e847f 	.word	0x001e847f
 8001200:	003d08ff 	.word	0x003d08ff
 8001204:	431bde83 	.word	0x431bde83
 8001208:	10624dd3 	.word	0x10624dd3

0800120c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	; 0x30
 8001210:	af02      	add	r7, sp, #8
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	4608      	mov	r0, r1
 8001216:	4611      	mov	r1, r2
 8001218:	461a      	mov	r2, r3
 800121a:	4603      	mov	r3, r0
 800121c:	817b      	strh	r3, [r7, #10]
 800121e:	460b      	mov	r3, r1
 8001220:	813b      	strh	r3, [r7, #8]
 8001222:	4613      	mov	r3, r2
 8001224:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001226:	f7ff fbdf 	bl	80009e8 <HAL_GetTick>
 800122a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b20      	cmp	r3, #32
 8001236:	f040 8208 	bne.w	800164a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2319      	movs	r3, #25
 8001240:	2201      	movs	r2, #1
 8001242:	497b      	ldr	r1, [pc, #492]	; (8001430 <HAL_I2C_Mem_Read+0x224>)
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f000 fc1d 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001250:	2302      	movs	r3, #2
 8001252:	e1fb      	b.n	800164c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <HAL_I2C_Mem_Read+0x56>
 800125e:	2302      	movs	r3, #2
 8001260:	e1f4      	b.n	800164c <HAL_I2C_Mem_Read+0x440>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b01      	cmp	r3, #1
 8001276:	d007      	beq.n	8001288 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0201 	orr.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001296:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2222      	movs	r2, #34	; 0x22
 800129c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2240      	movs	r2, #64	; 0x40
 80012a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80012b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012be:	b29a      	uxth	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4a5b      	ldr	r2, [pc, #364]	; (8001434 <HAL_I2C_Mem_Read+0x228>)
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012ca:	88f8      	ldrh	r0, [r7, #6]
 80012cc:	893a      	ldrh	r2, [r7, #8]
 80012ce:	8979      	ldrh	r1, [r7, #10]
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	4603      	mov	r3, r0
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 faea 	bl	80018b4 <I2C_RequestMemoryRead>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e1b0      	b.n	800164c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d113      	bne.n	800131a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	623b      	str	r3, [r7, #32]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	623b      	str	r3, [r7, #32]
 8001306:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	e184      	b.n	8001624 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131e:	2b01      	cmp	r3, #1
 8001320:	d11b      	bne.n	800135a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001330:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e164      	b.n	8001624 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135e:	2b02      	cmp	r3, #2
 8001360:	d11b      	bne.n	800139a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001370:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001380:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	61bb      	str	r3, [r7, #24]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	e144      	b.n	8001624 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80013b0:	e138      	b.n	8001624 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	f200 80f1 	bhi.w	800159e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d123      	bne.n	800140c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f000 fc72 	bl	8001cb2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e139      	b.n	800164c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f4:	3b01      	subs	r3, #1
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001400:	b29b      	uxth	r3, r3
 8001402:	3b01      	subs	r3, #1
 8001404:	b29a      	uxth	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	855a      	strh	r2, [r3, #42]	; 0x2a
 800140a:	e10b      	b.n	8001624 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001410:	2b02      	cmp	r3, #2
 8001412:	d14e      	bne.n	80014b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800141a:	2200      	movs	r2, #0
 800141c:	4906      	ldr	r1, [pc, #24]	; (8001438 <HAL_I2C_Mem_Read+0x22c>)
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f000 fb30 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d008      	beq.n	800143c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e10e      	b.n	800164c <HAL_I2C_Mem_Read+0x440>
 800142e:	bf00      	nop
 8001430:	00100002 	.word	0x00100002
 8001434:	ffff0000 	.word	0xffff0000
 8001438:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800144a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	691a      	ldr	r2, [r3, #16]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001468:	3b01      	subs	r3, #1
 800146a:	b29a      	uxth	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001474:	b29b      	uxth	r3, r3
 8001476:	3b01      	subs	r3, #1
 8001478:	b29a      	uxth	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149a:	3b01      	subs	r3, #1
 800149c:	b29a      	uxth	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	3b01      	subs	r3, #1
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80014b0:	e0b8      	b.n	8001624 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b8:	2200      	movs	r2, #0
 80014ba:	4966      	ldr	r1, [pc, #408]	; (8001654 <HAL_I2C_Mem_Read+0x448>)
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f000 fae1 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0bf      	b.n	800164c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f8:	3b01      	subs	r3, #1
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001504:	b29b      	uxth	r3, r3
 8001506:	3b01      	subs	r3, #1
 8001508:	b29a      	uxth	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001514:	2200      	movs	r2, #0
 8001516:	494f      	ldr	r1, [pc, #316]	; (8001654 <HAL_I2C_Mem_Read+0x448>)
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 fab3 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e091      	b.n	800164c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	691a      	ldr	r2, [r3, #16]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001554:	3b01      	subs	r3, #1
 8001556:	b29a      	uxth	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001560:	b29b      	uxth	r3, r3
 8001562:	3b01      	subs	r3, #1
 8001564:	b29a      	uxth	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001586:	3b01      	subs	r3, #1
 8001588:	b29a      	uxth	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001592:	b29b      	uxth	r3, r3
 8001594:	3b01      	subs	r3, #1
 8001596:	b29a      	uxth	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800159c:	e042      	b.n	8001624 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 fb85 	bl	8001cb2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e04c      	b.n	800164c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ce:	3b01      	subs	r3, #1
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015da:	b29b      	uxth	r3, r3
 80015dc:	3b01      	subs	r3, #1
 80015de:	b29a      	uxth	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d118      	bne.n	8001624 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160e:	3b01      	subs	r3, #1
 8001610:	b29a      	uxth	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b29a      	uxth	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001628:	2b00      	cmp	r3, #0
 800162a:	f47f aec2 	bne.w	80013b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2220      	movs	r2, #32
 8001632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800164a:	2302      	movs	r3, #2
  }
}
 800164c:	4618      	mov	r0, r3
 800164e:	3728      	adds	r7, #40	; 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	00010004 	.word	0x00010004

08001658 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af02      	add	r7, sp, #8
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	460b      	mov	r3, r1
 8001666:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff f9be 	bl	80009e8 <HAL_GetTick>
 800166c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800166e:	2301      	movs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b20      	cmp	r3, #32
 800167c:	f040 8111 	bne.w	80018a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	2319      	movs	r3, #25
 8001686:	2201      	movs	r2, #1
 8001688:	4988      	ldr	r1, [pc, #544]	; (80018ac <HAL_I2C_IsDeviceReady+0x254>)
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 f9fa 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001696:	2302      	movs	r3, #2
 8001698:	e104      	b.n	80018a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_I2C_IsDeviceReady+0x50>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e0fd      	b.n	80018a4 <HAL_I2C_IsDeviceReady+0x24c>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d007      	beq.n	80016ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0201 	orr.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2224      	movs	r2, #36	; 0x24
 80016e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4a70      	ldr	r2, [pc, #448]	; (80018b0 <HAL_I2C_IsDeviceReady+0x258>)
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001700:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2200      	movs	r2, #0
 800170a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f9b8 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00d      	beq.n	8001736 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001728:	d103      	bne.n	8001732 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e0b6      	b.n	80018a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001736:	897b      	ldrh	r3, [r7, #10]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001744:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001746:	f7ff f94f 	bl	80009e8 <HAL_GetTick>
 800174a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b02      	cmp	r3, #2
 8001758:	bf0c      	ite	eq
 800175a:	2301      	moveq	r3, #1
 800175c:	2300      	movne	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800176c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001770:	bf0c      	ite	eq
 8001772:	2301      	moveq	r3, #1
 8001774:	2300      	movne	r3, #0
 8001776:	b2db      	uxtb	r3, r3
 8001778:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800177a:	e025      	b.n	80017c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800177c:	f7ff f934 	bl	80009e8 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d302      	bcc.n	8001792 <HAL_I2C_IsDeviceReady+0x13a>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d103      	bne.n	800179a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	22a0      	movs	r2, #160	; 0xa0
 8001796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	bf0c      	ite	eq
 80017a8:	2301      	moveq	r3, #1
 80017aa:	2300      	movne	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2ba0      	cmp	r3, #160	; 0xa0
 80017d2:	d005      	beq.n	80017e0 <HAL_I2C_IsDeviceReady+0x188>
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <HAL_I2C_IsDeviceReady+0x188>
 80017da:	7dbb      	ldrb	r3, [r7, #22]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0cd      	beq.n	800177c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2220      	movs	r2, #32
 80017e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d129      	bne.n	800184a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001804:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2319      	movs	r3, #25
 8001822:	2201      	movs	r2, #1
 8001824:	4921      	ldr	r1, [pc, #132]	; (80018ac <HAL_I2C_IsDeviceReady+0x254>)
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 f92c 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e036      	b.n	80018a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2220      	movs	r2, #32
 800183a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	e02c      	b.n	80018a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001858:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001862:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2319      	movs	r3, #25
 800186a:	2201      	movs	r2, #1
 800186c:	490f      	ldr	r1, [pc, #60]	; (80018ac <HAL_I2C_IsDeviceReady+0x254>)
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f908 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e012      	b.n	80018a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	3301      	adds	r3, #1
 8001882:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	f4ff af32 	bcc.w	80016f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2220      	movs	r2, #32
 8001892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80018a2:	2302      	movs	r3, #2
  }
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	00100002 	.word	0x00100002
 80018b0:	ffff0000 	.word	0xffff0000

080018b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	4608      	mov	r0, r1
 80018be:	4611      	mov	r1, r2
 80018c0:	461a      	mov	r2, r3
 80018c2:	4603      	mov	r3, r0
 80018c4:	817b      	strh	r3, [r7, #10]
 80018c6:	460b      	mov	r3, r1
 80018c8:	813b      	strh	r3, [r7, #8]
 80018ca:	4613      	mov	r3, r2
 80018cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 f8c2 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00d      	beq.n	8001922 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001914:	d103      	bne.n	800191e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0aa      	b.n	8001a78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001922:	897b      	ldrh	r3, [r7, #10]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001930:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	6a3a      	ldr	r2, [r7, #32]
 8001936:	4952      	ldr	r1, [pc, #328]	; (8001a80 <I2C_RequestMemoryRead+0x1cc>)
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 f8fa 	bl	8001b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e097      	b.n	8001a78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800195e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001960:	6a39      	ldr	r1, [r7, #32]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f964 	bl	8001c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00d      	beq.n	800198a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	2b04      	cmp	r3, #4
 8001974:	d107      	bne.n	8001986 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001984:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e076      	b.n	8001a78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d105      	bne.n	800199c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001990:	893b      	ldrh	r3, [r7, #8]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	611a      	str	r2, [r3, #16]
 800199a:	e021      	b.n	80019e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800199c:	893b      	ldrh	r3, [r7, #8]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ac:	6a39      	ldr	r1, [r7, #32]
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f93e 	bl	8001c30 <I2C_WaitOnTXEFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00d      	beq.n	80019d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d107      	bne.n	80019d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e050      	b.n	8001a78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019d6:	893b      	ldrh	r3, [r7, #8]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e2:	6a39      	ldr	r1, [r7, #32]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f923 	bl	8001c30 <I2C_WaitOnTXEFlagUntilTimeout>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00d      	beq.n	8001a0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d107      	bne.n	8001a08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e035      	b.n	8001a78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 f82b 	bl	8001a84 <I2C_WaitOnFlagUntilTimeout>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00d      	beq.n	8001a50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a42:	d103      	bne.n	8001a4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e013      	b.n	8001a78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001a50:	897b      	ldrh	r3, [r7, #10]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	6a3a      	ldr	r2, [r7, #32]
 8001a64:	4906      	ldr	r1, [pc, #24]	; (8001a80 <I2C_RequestMemoryRead+0x1cc>)
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 f863 	bl	8001b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	00010002 	.word	0x00010002

08001a84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	4613      	mov	r3, r2
 8001a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a94:	e025      	b.n	8001ae2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9c:	d021      	beq.n	8001ae2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a9e:	f7fe ffa3 	bl	80009e8 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d302      	bcc.n	8001ab4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d116      	bne.n	8001ae2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2220      	movs	r2, #32
 8001abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f043 0220 	orr.w	r2, r3, #32
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e023      	b.n	8001b2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d10d      	bne.n	8001b08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4013      	ands	r3, r2
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bf0c      	ite	eq
 8001afe:	2301      	moveq	r3, #1
 8001b00:	2300      	movne	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	e00c      	b.n	8001b22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4013      	ands	r3, r2
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	bf0c      	ite	eq
 8001b1a:	2301      	moveq	r3, #1
 8001b1c:	2300      	movne	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d0b6      	beq.n	8001a96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b40:	e051      	b.n	8001be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b50:	d123      	bne.n	8001b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2220      	movs	r2, #32
 8001b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f043 0204 	orr.w	r2, r3, #4
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e046      	b.n	8001c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d021      	beq.n	8001be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba2:	f7fe ff21 	bl	80009e8 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d302      	bcc.n	8001bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d116      	bne.n	8001be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f043 0220 	orr.w	r2, r3, #32
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e020      	b.n	8001c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d10c      	bne.n	8001c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf14      	ite	ne
 8001c02:	2301      	movne	r3, #1
 8001c04:	2300      	moveq	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	e00b      	b.n	8001c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	43da      	mvns	r2, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	4013      	ands	r3, r2
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf14      	ite	ne
 8001c1c:	2301      	movne	r3, #1
 8001c1e:	2300      	moveq	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d18d      	bne.n	8001b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c3c:	e02d      	b.n	8001c9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f88d 	bl	8001d5e <I2C_IsAcknowledgeFailed>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e02d      	b.n	8001caa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d021      	beq.n	8001c9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c56:	f7fe fec7 	bl	80009e8 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d302      	bcc.n	8001c6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d116      	bne.n	8001c9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2220      	movs	r2, #32
 8001c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f043 0220 	orr.w	r2, r3, #32
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e007      	b.n	8001caa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca4:	2b80      	cmp	r3, #128	; 0x80
 8001ca6:	d1ca      	bne.n	8001c3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cbe:	e042      	b.n	8001d46 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b10      	cmp	r3, #16
 8001ccc:	d119      	bne.n	8001d02 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f06f 0210 	mvn.w	r2, #16
 8001cd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e029      	b.n	8001d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d02:	f7fe fe71 	bl	80009e8 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d302      	bcc.n	8001d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d116      	bne.n	8001d46 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2220      	movs	r2, #32
 8001d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f043 0220 	orr.w	r2, r3, #32
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e007      	b.n	8001d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d50:	2b40      	cmp	r3, #64	; 0x40
 8001d52:	d1b5      	bne.n	8001cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d74:	d11b      	bne.n	8001dae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d7e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f043 0204 	orr.w	r2, r3, #4
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e264      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d075      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dda:	4ba3      	ldr	r3, [pc, #652]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d00c      	beq.n	8001e00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de6:	4ba0      	ldr	r3, [pc, #640]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d112      	bne.n	8001e18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df2:	4b9d      	ldr	r3, [pc, #628]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dfe:	d10b      	bne.n	8001e18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	4b99      	ldr	r3, [pc, #612]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d05b      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x108>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d157      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e23f      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e20:	d106      	bne.n	8001e30 <HAL_RCC_OscConfig+0x74>
 8001e22:	4b91      	ldr	r3, [pc, #580]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a90      	ldr	r2, [pc, #576]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e01d      	b.n	8001e6c <HAL_RCC_OscConfig+0xb0>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x98>
 8001e3a:	4b8b      	ldr	r3, [pc, #556]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a8a      	ldr	r2, [pc, #552]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b88      	ldr	r3, [pc, #544]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a87      	ldr	r2, [pc, #540]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e00b      	b.n	8001e6c <HAL_RCC_OscConfig+0xb0>
 8001e54:	4b84      	ldr	r3, [pc, #528]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a83      	ldr	r2, [pc, #524]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b81      	ldr	r3, [pc, #516]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a80      	ldr	r2, [pc, #512]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d013      	beq.n	8001e9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7fe fdb8 	bl	80009e8 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7fe fdb4 	bl	80009e8 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	; 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e204      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	4b76      	ldr	r3, [pc, #472]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0xc0>
 8001e9a:	e014      	b.n	8001ec6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7fe fda4 	bl	80009e8 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7fe fda0 	bl	80009e8 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e1f0      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb6:	4b6c      	ldr	r3, [pc, #432]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xe8>
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d063      	beq.n	8001f9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ed2:	4b65      	ldr	r3, [pc, #404]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ede:	4b62      	ldr	r3, [pc, #392]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d11c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eea:	4b5f      	ldr	r3, [pc, #380]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d116      	bne.n	8001f24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef6:	4b5c      	ldr	r3, [pc, #368]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_RCC_OscConfig+0x152>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e1c4      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0e:	4b56      	ldr	r3, [pc, #344]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4952      	ldr	r1, [pc, #328]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	e03a      	b.n	8001f9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2c:	4b4f      	ldr	r3, [pc, #316]	; (800206c <HAL_RCC_OscConfig+0x2b0>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7fe fd59 	bl	80009e8 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7fe fd55 	bl	80009e8 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e1a5      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4c:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4940      	ldr	r1, [pc, #256]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
 8001f6c:	e015      	b.n	8001f9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6e:	4b3f      	ldr	r3, [pc, #252]	; (800206c <HAL_RCC_OscConfig+0x2b0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7fe fd38 	bl	80009e8 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7c:	f7fe fd34 	bl	80009e8 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e184      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d030      	beq.n	8002008 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d016      	beq.n	8001fdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fae:	4b30      	ldr	r3, [pc, #192]	; (8002070 <HAL_RCC_OscConfig+0x2b4>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb4:	f7fe fd18 	bl	80009e8 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fbc:	f7fe fd14 	bl	80009e8 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e164      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0x200>
 8001fda:	e015      	b.n	8002008 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fdc:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_RCC_OscConfig+0x2b4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7fe fd01 	bl	80009e8 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fea:	f7fe fcfd 	bl	80009e8 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e14d      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8001ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f0      	bne.n	8001fea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80a0 	beq.w	8002156 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201a:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10f      	bne.n	8002046 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_RCC_OscConfig+0x2ac>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002042:	2301      	movs	r3, #1
 8002044:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_OscConfig+0x2b8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d121      	bne.n	8002096 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_RCC_OscConfig+0x2b8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_RCC_OscConfig+0x2b8>)
 8002058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205e:	f7fe fcc3 	bl	80009e8 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	e011      	b.n	800208a <HAL_RCC_OscConfig+0x2ce>
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	42470000 	.word	0x42470000
 8002070:	42470e80 	.word	0x42470e80
 8002074:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002078:	f7fe fcb6 	bl	80009e8 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e106      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208a:	4b85      	ldr	r3, [pc, #532]	; (80022a0 <HAL_RCC_OscConfig+0x4e4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d106      	bne.n	80020ac <HAL_RCC_OscConfig+0x2f0>
 800209e:	4b81      	ldr	r3, [pc, #516]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	4a80      	ldr	r2, [pc, #512]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6713      	str	r3, [r2, #112]	; 0x70
 80020aa:	e01c      	b.n	80020e6 <HAL_RCC_OscConfig+0x32a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b05      	cmp	r3, #5
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_OscConfig+0x312>
 80020b4:	4b7b      	ldr	r3, [pc, #492]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b8:	4a7a      	ldr	r2, [pc, #488]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	6713      	str	r3, [r2, #112]	; 0x70
 80020c0:	4b78      	ldr	r3, [pc, #480]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c4:	4a77      	ldr	r2, [pc, #476]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6713      	str	r3, [r2, #112]	; 0x70
 80020cc:	e00b      	b.n	80020e6 <HAL_RCC_OscConfig+0x32a>
 80020ce:	4b75      	ldr	r3, [pc, #468]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	4a74      	ldr	r2, [pc, #464]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	6713      	str	r3, [r2, #112]	; 0x70
 80020da:	4b72      	ldr	r3, [pc, #456]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	4a71      	ldr	r2, [pc, #452]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80020e0:	f023 0304 	bic.w	r3, r3, #4
 80020e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d015      	beq.n	800211a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ee:	f7fe fc7b 	bl	80009e8 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f6:	f7fe fc77 	bl	80009e8 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	f241 3288 	movw	r2, #5000	; 0x1388
 8002104:	4293      	cmp	r3, r2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e0c5      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210c:	4b65      	ldr	r3, [pc, #404]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0ee      	beq.n	80020f6 <HAL_RCC_OscConfig+0x33a>
 8002118:	e014      	b.n	8002144 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7fe fc65 	bl	80009e8 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7fe fc61 	bl	80009e8 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e0af      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002138:	4b5a      	ldr	r3, [pc, #360]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ee      	bne.n	8002122 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d105      	bne.n	8002156 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214a:	4b56      	ldr	r3, [pc, #344]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a55      	ldr	r2, [pc, #340]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 8002150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 809b 	beq.w	8002296 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002160:	4b50      	ldr	r3, [pc, #320]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d05c      	beq.n	8002226 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d141      	bne.n	80021f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002174:	4b4c      	ldr	r3, [pc, #304]	; (80022a8 <HAL_RCC_OscConfig+0x4ec>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7fe fc35 	bl	80009e8 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002182:	f7fe fc31 	bl	80009e8 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e081      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002194:	4b43      	ldr	r3, [pc, #268]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f0      	bne.n	8002182 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	019b      	lsls	r3, r3, #6
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	085b      	lsrs	r3, r3, #1
 80021b8:	3b01      	subs	r3, #1
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	061b      	lsls	r3, r3, #24
 80021c4:	4937      	ldr	r1, [pc, #220]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ca:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <HAL_RCC_OscConfig+0x4ec>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7fe fc0a 	bl	80009e8 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d8:	f7fe fc06 	bl	80009e8 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e056      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ea:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x41c>
 80021f6:	e04e      	b.n	8002296 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <HAL_RCC_OscConfig+0x4ec>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe fbf3 	bl	80009e8 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe fbef 	bl	80009e8 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e03f      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002218:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x44a>
 8002224:	e037      	b.n	8002296 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e032      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002232:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <HAL_RCC_OscConfig+0x4e8>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d028      	beq.n	8002292 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d121      	bne.n	8002292 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d11a      	bne.n	8002292 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002262:	4013      	ands	r3, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002268:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800226a:	4293      	cmp	r3, r2
 800226c:	d111      	bne.n	8002292 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	085b      	lsrs	r3, r3, #1
 800227a:	3b01      	subs	r3, #1
 800227c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d107      	bne.n	8002292 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40007000 	.word	0x40007000
 80022a4:	40023800 	.word	0x40023800
 80022a8:	42470060 	.word	0x42470060

080022ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0cc      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b68      	ldr	r3, [pc, #416]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d90c      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b65      	ldr	r3, [pc, #404]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b63      	ldr	r3, [pc, #396]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0b8      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002300:	4b59      	ldr	r3, [pc, #356]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a58      	ldr	r2, [pc, #352]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800230a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002318:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4a52      	ldr	r2, [pc, #328]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002324:	4b50      	ldr	r3, [pc, #320]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	494d      	ldr	r1, [pc, #308]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d044      	beq.n	80023cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d119      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e07f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d003      	beq.n	800236a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002366:	2b03      	cmp	r3, #3
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236a:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e067      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238a:	4b37      	ldr	r3, [pc, #220]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f023 0203 	bic.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4934      	ldr	r1, [pc, #208]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800239c:	f7fe fb24 	bl	80009e8 <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7fe fb20 	bl	80009e8 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e04f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 020c 	and.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1eb      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d20c      	bcs.n	80023f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b22      	ldr	r3, [pc, #136]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e032      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4916      	ldr	r1, [pc, #88]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800241e:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	490e      	ldr	r1, [pc, #56]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002432:	f000 f821 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002436:	4602      	mov	r2, r0
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	490a      	ldr	r1, [pc, #40]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	5ccb      	ldrb	r3, [r1, r3]
 8002446:	fa22 f303 	lsr.w	r3, r2, r3
 800244a:	4a09      	ldr	r2, [pc, #36]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_RCC_ClockConfig+0x1c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fa84 	bl	8000960 <HAL_InitTick>

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023c00 	.word	0x40023c00
 8002468:	40023800 	.word	0x40023800
 800246c:	08002694 	.word	0x08002694
 8002470:	20000000 	.word	0x20000000
 8002474:	20000004 	.word	0x20000004

08002478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002478:	b5b0      	push	{r4, r5, r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800247e:	2100      	movs	r1, #0
 8002480:	6079      	str	r1, [r7, #4]
 8002482:	2100      	movs	r1, #0
 8002484:	60f9      	str	r1, [r7, #12]
 8002486:	2100      	movs	r1, #0
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800248a:	2100      	movs	r1, #0
 800248c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800248e:	4952      	ldr	r1, [pc, #328]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002490:	6889      	ldr	r1, [r1, #8]
 8002492:	f001 010c 	and.w	r1, r1, #12
 8002496:	2908      	cmp	r1, #8
 8002498:	d00d      	beq.n	80024b6 <HAL_RCC_GetSysClockFreq+0x3e>
 800249a:	2908      	cmp	r1, #8
 800249c:	f200 8094 	bhi.w	80025c8 <HAL_RCC_GetSysClockFreq+0x150>
 80024a0:	2900      	cmp	r1, #0
 80024a2:	d002      	beq.n	80024aa <HAL_RCC_GetSysClockFreq+0x32>
 80024a4:	2904      	cmp	r1, #4
 80024a6:	d003      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x38>
 80024a8:	e08e      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024aa:	4b4c      	ldr	r3, [pc, #304]	; (80025dc <HAL_RCC_GetSysClockFreq+0x164>)
 80024ac:	60bb      	str	r3, [r7, #8]
       break;
 80024ae:	e08e      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024b0:	4b4b      	ldr	r3, [pc, #300]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80024b2:	60bb      	str	r3, [r7, #8]
      break;
 80024b4:	e08b      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024b6:	4948      	ldr	r1, [pc, #288]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80024b8:	6849      	ldr	r1, [r1, #4]
 80024ba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80024be:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024c0:	4945      	ldr	r1, [pc, #276]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80024c2:	6849      	ldr	r1, [r1, #4]
 80024c4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80024c8:	2900      	cmp	r1, #0
 80024ca:	d024      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024cc:	4942      	ldr	r1, [pc, #264]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80024ce:	6849      	ldr	r1, [r1, #4]
 80024d0:	0989      	lsrs	r1, r1, #6
 80024d2:	4608      	mov	r0, r1
 80024d4:	f04f 0100 	mov.w	r1, #0
 80024d8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80024dc:	f04f 0500 	mov.w	r5, #0
 80024e0:	ea00 0204 	and.w	r2, r0, r4
 80024e4:	ea01 0305 	and.w	r3, r1, r5
 80024e8:	493d      	ldr	r1, [pc, #244]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80024ea:	fb01 f003 	mul.w	r0, r1, r3
 80024ee:	2100      	movs	r1, #0
 80024f0:	fb01 f102 	mul.w	r1, r1, r2
 80024f4:	1844      	adds	r4, r0, r1
 80024f6:	493a      	ldr	r1, [pc, #232]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80024f8:	fba2 0101 	umull	r0, r1, r2, r1
 80024fc:	1863      	adds	r3, r4, r1
 80024fe:	4619      	mov	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	461a      	mov	r2, r3
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	f7fd fe64 	bl	80001d4 <__aeabi_uldivmod>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4613      	mov	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	e04a      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002516:	4b30      	ldr	r3, [pc, #192]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	099b      	lsrs	r3, r3, #6
 800251c:	461a      	mov	r2, r3
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002526:	f04f 0100 	mov.w	r1, #0
 800252a:	ea02 0400 	and.w	r4, r2, r0
 800252e:	ea03 0501 	and.w	r5, r3, r1
 8002532:	4620      	mov	r0, r4
 8002534:	4629      	mov	r1, r5
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	014b      	lsls	r3, r1, #5
 8002540:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002544:	0142      	lsls	r2, r0, #5
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	1b00      	subs	r0, r0, r4
 800254c:	eb61 0105 	sbc.w	r1, r1, r5
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	018b      	lsls	r3, r1, #6
 800255a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800255e:	0182      	lsls	r2, r0, #6
 8002560:	1a12      	subs	r2, r2, r0
 8002562:	eb63 0301 	sbc.w	r3, r3, r1
 8002566:	f04f 0000 	mov.w	r0, #0
 800256a:	f04f 0100 	mov.w	r1, #0
 800256e:	00d9      	lsls	r1, r3, #3
 8002570:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002574:	00d0      	lsls	r0, r2, #3
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	1912      	adds	r2, r2, r4
 800257c:	eb45 0303 	adc.w	r3, r5, r3
 8002580:	f04f 0000 	mov.w	r0, #0
 8002584:	f04f 0100 	mov.w	r1, #0
 8002588:	0299      	lsls	r1, r3, #10
 800258a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800258e:	0290      	lsls	r0, r2, #10
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	461a      	mov	r2, r3
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	f7fd fe18 	bl	80001d4 <__aeabi_uldivmod>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4613      	mov	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025ac:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	3301      	adds	r3, #1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	60bb      	str	r3, [r7, #8]
      break;
 80025c6:	e002      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <HAL_RCC_GetSysClockFreq+0x164>)
 80025ca:	60bb      	str	r3, [r7, #8]
      break;
 80025cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ce:	68bb      	ldr	r3, [r7, #8]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bdb0      	pop	{r4, r5, r7, pc}
 80025d8:	40023800 	.word	0x40023800
 80025dc:	00f42400 	.word	0x00f42400
 80025e0:	017d7840 	.word	0x017d7840

080025e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000000 	.word	0x20000000

080025fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002600:	f7ff fff0 	bl	80025e4 <HAL_RCC_GetHCLKFreq>
 8002604:	4602      	mov	r2, r0
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	0a9b      	lsrs	r3, r3, #10
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	4903      	ldr	r1, [pc, #12]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002612:	5ccb      	ldrb	r3, [r1, r3]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40023800 	.word	0x40023800
 8002620:	080026a4 	.word	0x080026a4

08002624 <__libc_init_array>:
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	4d0d      	ldr	r5, [pc, #52]	; (800265c <__libc_init_array+0x38>)
 8002628:	4c0d      	ldr	r4, [pc, #52]	; (8002660 <__libc_init_array+0x3c>)
 800262a:	1b64      	subs	r4, r4, r5
 800262c:	10a4      	asrs	r4, r4, #2
 800262e:	2600      	movs	r6, #0
 8002630:	42a6      	cmp	r6, r4
 8002632:	d109      	bne.n	8002648 <__libc_init_array+0x24>
 8002634:	4d0b      	ldr	r5, [pc, #44]	; (8002664 <__libc_init_array+0x40>)
 8002636:	4c0c      	ldr	r4, [pc, #48]	; (8002668 <__libc_init_array+0x44>)
 8002638:	f000 f820 	bl	800267c <_init>
 800263c:	1b64      	subs	r4, r4, r5
 800263e:	10a4      	asrs	r4, r4, #2
 8002640:	2600      	movs	r6, #0
 8002642:	42a6      	cmp	r6, r4
 8002644:	d105      	bne.n	8002652 <__libc_init_array+0x2e>
 8002646:	bd70      	pop	{r4, r5, r6, pc}
 8002648:	f855 3b04 	ldr.w	r3, [r5], #4
 800264c:	4798      	blx	r3
 800264e:	3601      	adds	r6, #1
 8002650:	e7ee      	b.n	8002630 <__libc_init_array+0xc>
 8002652:	f855 3b04 	ldr.w	r3, [r5], #4
 8002656:	4798      	blx	r3
 8002658:	3601      	adds	r6, #1
 800265a:	e7f2      	b.n	8002642 <__libc_init_array+0x1e>
 800265c:	080026b4 	.word	0x080026b4
 8002660:	080026b4 	.word	0x080026b4
 8002664:	080026b4 	.word	0x080026b4
 8002668:	080026b8 	.word	0x080026b8

0800266c <memset>:
 800266c:	4402      	add	r2, r0
 800266e:	4603      	mov	r3, r0
 8002670:	4293      	cmp	r3, r2
 8002672:	d100      	bne.n	8002676 <memset+0xa>
 8002674:	4770      	bx	lr
 8002676:	f803 1b01 	strb.w	r1, [r3], #1
 800267a:	e7f9      	b.n	8002670 <memset+0x4>

0800267c <_init>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	bf00      	nop
 8002680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002682:	bc08      	pop	{r3}
 8002684:	469e      	mov	lr, r3
 8002686:	4770      	bx	lr

08002688 <_fini>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	bf00      	nop
 800268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268e:	bc08      	pop	{r3}
 8002690:	469e      	mov	lr, r3
 8002692:	4770      	bx	lr
